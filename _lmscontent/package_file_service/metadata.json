{
  "UUID": "8547b3fc-a265-3b93-be1b-9abe1ff61581",
  "_displayName_": "Package File Service",
  "_keyword_": "course_pathway",
  "components": [
    {
      "_displayName_": "Course Requirement #355",
      "_keyword_": "course_requirement",
      "component": {
        "UUID": "4cf15e78-a07f-3a51-84f1-6dce4503ee39",
        "_displayName_": "Package File Service - Relationships",
        "_keyword_": "content_component",
        "content": "<h2 id=\"toc_0\">Introduction:</h2>\r\n<p>Now that you have looked at the package, file, and service resource types, try using them together. Consider the following scenario:</p>\r\n<ul>\r\n<li>\r\n<p>You want to deploy an application called Myapp.</p>\r\n</li>\r\n<li>\r\n<p>You can install Myapp using the myapp package.</p>\r\n</li>\r\n<li>\r\n<p>After you install myapp, you can configure it by editing settings in <code>/myapp/config.json</code>.</p>\r\n</li>\r\n<li>\r\n<p>After you configure Myapp, start the myapp service to start your application.</p>\r\n</li>\r\n</ul>\r\n<p>This is a common scenario for software such as IIS, MySQL, Tomcat, or Redis. In all cases, you have to consider ordering. Puppet must first install the package, then edit the configuration file, and finally attempt to start the service. Otherwise, if Puppet tried a service that wasn't yet installed, it would generate an error like <q>No such service exists.</q> You can be very explicit about this ordering in your code.</p>\r\n<p>Example:</p>\r\n<div>\r\n<pre><code class=\"language-none\">package { 'myapp':\r\n  ensure =&gt; installed,\r\n}\r\nfile { '/myapp/config.json':\r\n  ensure  =&gt; file,\r\n  content =&gt; '{ \"configuration\": \"some setting\"}',\r\n  require =&gt; Package['myapp'],\r\n}</code></pre>\r\n</div>\r\n<p>The <code>require</code> attribute tells Puppet that the file resource needs the package resource to go first. Alternately, this can be written as:</p>\r\n<div>\r\n<pre><code class=\"language-none\">package { 'myapp':\r\n  ensure =&gt; installed,\r\n  before =&gt; File['/myapp/config.json'],\r\n}\r\nfile { '/myapp/config.json':\r\n  ensure  =&gt; file,\r\n  content =&gt; '{ \"configuration\": \"some setting\"}',\r\n}\r\n</code></pre>\r\n</div>\r\n<p>This example uses the <code>before</code> attribute to tell Puppet that the package resource must go before the file resource. Ultimately, these two examples do the exact same thing. Depending on your preference, you can write it either way.</p>\r\n<blockquote>\r\n<p id=\"toc_1\"><strong>Pro Tip:</strong></p>\r\n<p>When referring to another resource using <code>before</code> or <code>require</code>, the resource type is capitalized. Be sure you also note the syntax used for defining relationships:</p>\r\n</blockquote>\r\n<p style=\"text-align: center;\"><img src=\"/static/images/courses/syntax/342-anatomy-of-a-relationship-whitespace-copy.png\" alt=\"Puppet code block labelled with relationship, type, and title on bottom line of code block.\" width=\"700\" /></p>\r\n<h6 style=\"text-align: center;\"><a href=\"/static/images/courses/syntax/342-anatomy-of-a-relationship-whitespace-copy.png\" target=\"_blank\">Enlarge image</a></h6>\r\n<h2 id=\"toc_2\">Task:</h2>\r\n<p>Add <code>before</code> or <code>require</code> to the following code so that the package resource is managed first and the file resource is managed second.</p>\r\n<p><iframe src=\"https://magicbox.whatsaranjit.com/pfs/package_file\" width=\"100%\" height=\"500px\" frameborder=\"0\"></iframe></p>",
        "created": "2017-11-10 15:19:28",
        "createdById": 49633,
        "customField01": "",
        "customField02": "",
        "customField03": "",
        "customField04": "",
        "customField05": "",
        "customField06": "",
        "customField07": "",
        "customField08": "",
        "customField09": "",
        "customField10": "",
        "deprecatedBy": "",
        "duration": {
          "days": 0,
          "minutesPerDay": 0
        },
        "generateCertificate": "DEFAULT",
        "generateProofOfCompletion": "DEFAULT",
        "id": 342,
        "modified": "2018-01-12 16:22:06",
        "modifiedById": 49633,
        "name": "Package File Service - Relationships",
        "orderNumber": 0,
        "price": {
          "amount": 0.0,
          "currency": "USD"
        },
        "primaryCategoryId": 7,
        "status": "ACTIVE_COMPONENT",
        "urlName": "package-file-service",
        "visibility": "HIDDEN"
      },
      "componentId": 342,
      "componentUUID": "4cf15e78-a07f-3a51-84f1-6dce4503ee39",
      "created": "2017-12-19 10:26:13",
      "createdById": 49633,
      "id": 355,
      "modified": "2018-01-25 15:53:56",
      "modifiedById": 49633,
      "name": "Package File Service - Relationships",
      "pathwayId": 346,
      "position": 0
    },
    {
      "_displayName_": "Course Requirement #363",
      "_keyword_": "course_requirement",
      "component": {
        "UUID": "74c2c390-95ca-36c0-8a38-e01f100edcbf",
        "_displayName_": "Package File Service - Refresh Events",
        "_keyword_": "content_component",
        "content": "<h2 id=\"toc_0\">Introduction:</h2>\r\n<p>You have seen ways to edit an application's configuration file before you start its service. But what if you need to make a change to a service that is already running? Most software requires a restart after you edit the configuration file for that change to take effect. Puppet allows you to refresh using the <code>subscribe</code> or <code>notify</code>&nbsp;attributes.</p>\r\n<p>Puppet lets you use <code>notify</code> and <code>subscribe</code> to not only order resources, but send a <strong>refresh</strong>. Refreshing a resource means different things depending on the resource type. For example, when you refresh a service resource type, Puppet restarts the service. And when you refresh a mount resource type, Puppet remounts a file mount. You can try to refresh any type in Puppet, but not all of them will respond. Read the <a href=\"https://puppet.com/docs/puppet/5.3/lang_relationships.html#refreshing-and-notification\">Puppet docs</a> for more information about refreshing and notification.</p>\r\n<p>Example:</p>\r\n<div>\r\n<pre><code class=\"language-none\">package { 'myapp':\r\n  ensure =&gt; installed,\r\n}\r\nfile { '/myapp/config.json':\r\n  ensure  =&gt; file,\r\n  content =&gt; '{ \"configuration\": \"some setting\"}',\r\n  require =&gt; Package['myapp']\r\n}\r\nservice { 'myapp':\r\n  ensure    =&gt; running,\r\n  subscribe =&gt; File['/myapp/config.json'],\r\n}</code></pre>\r\n</div>\r\n<p>In this example, the <code>subscribe</code> attribute tells Puppet to manage the file resource before the service resource and to restart the service if the file resource changes. This can also be written like the following example:</p>\r\n<div>\r\n<pre><code class=\"language-none\">package { 'myapp':\r\n  ensure =&gt; installed,\r\n  before =&gt; File['/myapp/config.json'],\r\n}\r\nfile { '/myapp/config.json':\r\n  ensure  =&gt; file,\r\n  content =&gt; '{ \"configuration\": \"some setting\"}',\r\n  notify  =&gt; Service['myapp'],\r\n}\r\nservice { 'myapp':\r\n  ensure    =&gt; running,\r\n}</code></pre>\r\n</div>\r\n<p>This example uses the <code>notify</code> attribute instead of <code>subscribe</code> but the outcome is the same.</p>\r\n<p>If you want to use <code>before</code> and also send a refresh, use <code>notify</code>. If you want to use <code>require</code> and also receive a refresh, use <code>subscribe</code>.</p>\r\n<h2 id=\"toc_1\">Task:</h2>\r\n<p>Add <code>notify</code> or <code>subscribe</code> to the following code so that the service is restarted if the file resource is changed.</p>\r\n<p><iframe src=\"https://magicbox.whatsaranjit.com/pfs/file_service\" width=\"100%\" height=\"500px\" frameborder=\"0\"></iframe></p>",
        "created": "2018-01-10 11:09:44",
        "createdById": 31489,
        "customField01": "",
        "customField02": "",
        "customField03": "",
        "customField04": "",
        "customField05": "",
        "customField06": "",
        "customField07": "",
        "customField08": "",
        "customField09": "",
        "customField10": "",
        "deprecatedBy": "",
        "duration": {
          "days": 0,
          "minutesPerDay": 10
        },
        "generateCertificate": "DEFAULT",
        "generateProofOfCompletion": "DEFAULT",
        "id": 381,
        "modified": "2018-01-12 16:23:36",
        "modifiedById": 49633,
        "name": "Package File Service - Refresh Events",
        "orderNumber": 0,
        "price": {
          "amount": 0.0,
          "currency": "USD"
        },
        "primaryCategoryId": 7,
        "status": "ENABLED",
        "urlName": "package-file-service---refresh-events",
        "visibility": "PUBLIC"
      },
      "componentId": 381,
      "componentUUID": "74c2c390-95ca-36c0-8a38-e01f100edcbf",
      "created": "2018-01-10 11:10:20",
      "createdById": 31489,
      "id": 363,
      "modified": "2018-01-25 15:53:57",
      "modifiedById": 49633,
      "name": "Package File Service - Refresh Events",
      "pathwayId": 346,
      "position": 1
    },
    {
      "_displayName_": "Course Requirement #358",
      "_keyword_": "course_requirement",
      "component": {
        "UUID": "00446ca0-70eb-3da3-a30b-33188203e9a3",
        "_displayName_": "Package File Service - Putting it all together",
        "_keyword_": "content_component",
        "content": "<h2 id=\"toc_1\">Introduction:</h2>\r\n<p>You have now practiced creating resource relationships between a package and a file, and a file and service. Now put it all together in a common pattern called Package File Service.</p>\r\n<p>This pattern tells Puppet to do the following:</p>\r\n<ol>\r\n<li>First manage a package resource</li>\r\n<li>Next manage a file resource</li>\r\n<li>Finally manage a service resource</li>\r\n</ol>\r\n<p>The service will also restart if the file resource changes at all.</p>\r\n<p>Look at the below example. You will use the three resources and add the resource relationships to model the Package File Service pattern.</p>\r\n<div>\r\n<pre><code class=\"language-none\">package { 'httpd':\r\n  ensure =&gt; installed,\r\n}\r\nfile { '/etc/httpd/conf.d/httpd.conf':\r\n  ensure  =&gt; file,\r\n  content =&gt; 'Listen 80',\r\n}\r\nservice { 'httpd':\r\n  ensure =&gt; running,\r\n}</code></pre>\r\n</div>\r\n<h2 id=\"toc_2\">Task:</h2>\r\n<p>Add resource relationships to the following code so that the resources are managed in the order of package, file, service. The service should restart if the file resource is changed. You can choose between <code>before/require</code> and <code>notify/subscribe</code>.</p>\r\n<p><iframe src=\"https://magicbox.whatsaranjit.com/pfs/package_file_service\" width=\"100%\" height=\"500px\" frameborder=\"0\"></iframe></p>",
        "created": "2017-12-28 16:49:01",
        "createdById": 31489,
        "customField01": "",
        "customField02": "",
        "customField03": "",
        "customField04": "",
        "customField05": "",
        "customField06": "",
        "customField07": "",
        "customField08": "",
        "customField09": "",
        "customField10": "",
        "deprecatedBy": "",
        "duration": {
          "days": 0,
          "minutesPerDay": 30
        },
        "generateCertificate": "DEFAULT",
        "generateProofOfCompletion": "DEFAULT",
        "id": 379,
        "modified": "2018-01-12 16:25:42",
        "modifiedById": 49633,
        "name": "Package File Service - Putting it all together",
        "orderNumber": 0,
        "price": {
          "amount": 0.0,
          "currency": "USD"
        },
        "primaryCategoryId": 7,
        "status": "ACTIVE_COMPONENT",
        "urlName": "package-file-service---putting-it-all-together",
        "visibility": "HIDDEN"
      },
      "componentId": 379,
      "componentUUID": "00446ca0-70eb-3da3-a30b-33188203e9a3",
      "created": "2017-12-28 16:51:18",
      "createdById": 31489,
      "id": 358,
      "modified": "2018-01-25 15:53:56",
      "modifiedById": 49633,
      "name": "Package File Service - Putting it all together",
      "pathwayId": 346,
      "position": 2
    }
  ],
  "courseInfo": "",
  "created": "2017-11-10 15:20:48",
  "createdById": 49633,
  "customField01": "",
  "customField02": "",
  "customField03": "",
  "customField04": "",
  "customField05": "",
  "customField06": "",
  "customField07": "",
  "customField08": "",
  "customField09": "",
  "customField10": "",
  "deprecatedBy": "",
  "duration": {
    "days": 0,
    "minutesPerDay": 0
  },
  "generateCertificate": "DEFAULT",
  "generateProofOfCompletion": "DEFAULT",
  "id": 346,
  "modified": "2017-11-14 17:00:34",
  "modifiedById": 38,
  "name": "Package File Service",
  "orderNumber": 0,
  "price": {
    "amount": 0.0,
    "currency": "USD"
  },
  "primaryCategoryId": 7,
  "status": "ACTIVE_COMPONENT",
  "type": {
    "_displayName_": "Module",
    "_keyword_": "course_pathway_type",
    "created": "2015-06-14 23:21:43",
    "id": 3,
    "modified": "2015-06-14 23:21:43",
    "name": "Module",
    "rootType": false,
    "supportedComponentTypes": [
      "e_learning_component",
      "course",
      "content_component",
      "exam_component"
    ]
  },
  "typeId": 3,
  "urlName": "package-file-service",
  "visibility": "HIDDEN"
}
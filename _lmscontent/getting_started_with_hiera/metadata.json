{"UUID":"1cce0a3f-b0ee-350e-a1f4-13a7dd9ca6cc","_displayName_":"Getting Started with Hiera","_keyword_":"course_pathway","components":[{"_displayName_":"Course Requirement #175","_keyword_":"course_requirement","component":{"UUID":"2918f650-8574-3a9e-b684-bc84ee1382d0","_displayName_":"Getting Started with Hiera - Part 1","_keyword_":"content_component","content":"<link rel=\"stylesheet\" href=\"/static/selfpaced/selfpaced.css\" />\r\n\r\n<script defer=\"\" src=\"//code.jquery.com/jquery-1.11.2.js\"></script>\r\n\r\n<script defer=\"\" src=\"https://try.puppet.com/js/selfpaced.js\"></script>\r\n\r\n<div id=\"lesson\">\r\n\r\n  <div id=\"instructions\">\r\n\r\n    <div class=\"instruction-header\">\r\n      <p><i class=\"fa fa-graduation-cap\"></i>\r\nLesson</p>\r\n    </div>\r\n\r\n    <div class=\"instruction-content\">\r\n      <p>When you first start using Puppet, you might include configuration details in\r\nyour Puppet code.  For example, when setting up a database server, you might\r\nhard-code the hostname of the server in the Puppet manifest. As your Puppet\r\nimplementation grows, this can become unmanageable. Making a small change to a\r\nsystem might mean making changes across multiple parts of your Puppet code.\r\nHiera offers a robust and straightforward way to separate data from code.</p>\r\n\r\n      <p>The name &#8216;Hiera&#8217; stands for hierarchy, but the most basic functional Hiera\r\nconfig doesn&#8217;t have to be hierarchical.  Let&#8217;s set up a simple flat lookup using\r\nHiera.</p>\r\n\r\n      <p>Imagine you want to set a default message of the day on your servers.  You\r\ncould do this with the following Puppet code:</p>\r\n\r\n      <pre>\r\n$message = \"Welcome to try.puppet.com. Don't break anything!\"\r\nfile { '/etc/motd':\r\n  content =&gt; $message\r\n}\r\n</pre>\r\n\r\n      <p>This works just fine, but the more you hard-code data into your Puppet code,\r\nthe harder it is to maintain.  What if you wanted to share that code with\r\nsomeone outside your company? You&#8217;d have to remember to go in and clean out any\r\npotentially sensitive data across your entire codebase.</p>\r\n\r\n      <p>Even with the simplest configuration, Hiera offers a robust way to separate that\r\ndata from your code.</p>\r\n\r\n      <p>Using Hiera, the code would look this this:</p>\r\n      <pre>\r\n$message = hiera('message')\r\nfile { '/etc/motd':\r\n  content =&gt; $message\r\n}\r\n</pre>\r\n\r\n      <p>You&#8217;ll need to tell Hiera where to find the data, this is done with the\r\n<code>/etc/puppetlabs/puppet/hiera.yaml</code> file.  The file Puppet installs by default\r\nwill work:</p>\r\n\r\n      <pre>\r\n---\r\n:backends:\r\n  - yaml\r\n:hierarchy:\r\n  - \"nodes/%{::trusted.certname}\"\r\n  - common\r\n:yaml:\r\n# datadir is empty here, so hiera uses its defaults:\r\n# - /etc/puppetlabs/code/environments/%{environment}/hieradata on *nix\r\n# - %CommonAppData%\\PuppetLabs\\code\\environments\\%{environment}\\hieradata on Windows\r\n# When specifying a datadir, make sure the directory exists.\r\n  :datadir:\r\n</pre>\r\n\r\n      <p>The lines starting with <code>#</code> are comments, and for now just ignore the first item\r\nunder <code>:hierarchy:</code>, we&#8217;re going to start with <code>common</code>. In future lessons, \r\nwe&#8217;ll add some more levels and use the defaults more. We&#8217;ll keep &#8220;common&#8221; as \r\nthe base of the hierarchy as a place to hold global defaults.</p>\r\n\r\n      <p>Notice in the comment about default <code>datadir</code> that it says your data will be in\r\n<code>/etc/puppetlabs/code/environments/%{environment}/hieradata</code>.\r\n<code>%{environment}</code> part will be interpolated by Puppet to refer to your code\r\nenvironment.  The default is <code>production</code>, so that&#8217;s what we&#8217;ll use for this\r\nexercise.</p>\r\n\r\n      <p>We still need to add the actual data. Do this by creating a file called\r\n<code>common.yaml</code> in the <code>datadir</code> that&#8217;s listed in <code>hiera.yaml</code></p>\r\n\r\n      <p><code>common.yaml</code> looks like this:</p>\r\n      <pre>\r\n---\r\nmessage: \"Welcome to %{fqdn} Don't break anything!\"\r\n</pre>\r\n\r\n      <p>Just like we use <code>%{environment}</code> the <code>%{fqdn}</code> will be interpolated as the\r\nfully qualified domain name of your node.</p>\r\n\r\n    </div>\r\n\r\n    <div class=\"instruction-header\">\r\n      <p><i class=\"fa fa-desktop\"></i>\r\nPractice</p>\r\n    </div>\r\n\r\n    <div class=\"instruction-content\">\r\n\r\n      <p>Now that you have a sense of the basic config, try adding another key/value\r\npair to the <code>common.yaml</code> on your agent node. Experiment with changing things\r\nto see what results you get. Don&#8217;t worry if you break something, just reload\r\nthe page to get a fresh machine.</p>\r\n\r\n    </div>\r\n\r\n    <div class=\"instruction-header\">\r\n      <p><i class=\"fa fa-square-check-o\"></i>\r\nInstructions</p>\r\n    </div>\r\n\r\n    <div class=\"instruction-content\">\r\n      <p>If you haven&#8217;t already, run <code>puppet agent -t</code> to set up your node with\r\nexample code.</p>\r\n\r\n      <p><strong>Note: You will see a notice about your code environment not matching the server. \r\nThis is because nodes ask for &#8220;production&#8221; by default, but we&#8217;ve set up a\r\ncode environment just for your node.</strong></p>\r\n\r\n      <p>To test out Hiera, you can use make a simple manifest like the examples above\r\nand use <code>puppet apply</code>. The notify resource can be handy for this.  For example, \r\nto lookup the value of &#8220;message&#8221;, create a file <code>/root/message.pp</code>:</p>\r\n\r\n      <pre>\r\nnotify{hiera('message'):}\r\n</pre>\r\n\r\n      <p>To see the hiera value run <code>puppet apply /root/message.pp</code></p>\r\n\r\n      <p>Add a second key by editing <code>/etc/puppetlabs/code/environments/production/hieradata/common.yaml</code></p>\r\n\r\n      <p>You node has <code>vim</code> already installed and you can install others such as <code>nano</code>\r\nby using the command <code>puppet apply -e \"package{'nano': ensure =&gt; present}\"</code></p>\r\n    </div>\r\n\r\n    <div class=\"instruction-header\">\r\n      <p><i class=\"fa fa-pencil\"></i>\r\nNotes</p>\r\n    </div>\r\n\r\n    <div class=\"instruction-content\">\r\n\r\n      <p>Hiera data should live on the Puppet master. For learning how hiera works, \r\nwe&#8217;re editing code on the agent and using <code>puppet apply</code>.</p>\r\n\r\n      <p>If you make a mistake and would like a fresh practice environment, type\r\n<code>exit</code> and click the <code>start session</code> button when it appears.</p>\r\n\r\n      <p>We&#8217;ve provided the courses Introduction to the Linux Command Line and \r\nAn Introduction to Vim in case you need a refresher.</p>\r\n\r\n    </div>\r\n\r\n  </div>\r\n\r\n  <div id=\"terminal\">\r\n    <iframe id=\"try\" src=\"https://try.puppet.com/sandbox/?course=get_hiera1\" name=\"terminal\"></iframe>\r\n  </div>\r\n\r\n</div>","created":"2016-07-13 11:47:13","createdById":35,"deprecatedBy":"","duration":{"days":0,"minutesPerDay":0},"generateCertificate":"DEFAULT","generateProofOfCompletion":"DEFAULT","id":220,"modified":"2016-11-15 12:00:32","modifiedById":35,"name":"Getting Started with Hiera - Part 1","orderNumber":0,"price":{"amount":0.0,"currency":"USD"},"primaryCategoryId":7,"status":"ACTIVE_COMPONENT","urlName":"getting-started-with-hiera---part-1","visibility":"HIDDEN"},"componentId":220,"componentUUID":"2918f650-8574-3a9e-b684-bc84ee1382d0","created":"2016-07-13 11:51:21","createdById":35,"id":175,"modified":"2016-07-13 11:51:21","modifiedById":35,"name":"Part 1","pathwayId":219,"position":1},{"_displayName_":"Course Requirement #176","_keyword_":"course_requirement","component":{"UUID":"ee902852-733a-3607-b031-f63e9564ca56","_displayName_":"Getting Started with Hiera - Part 2","_keyword_":"content_component","content":"<link rel=\"stylesheet\" href=\"/static/selfpaced/selfpaced.css\" />\r\n\r\n<script defer=\"\" src=\"//code.jquery.com/jquery-1.11.2.js\"></script>\r\n\r\n<script defer=\"\" src=\"https://try.puppet.com/js/selfpaced.js\"></script>\r\n\r\n<div id=\"lesson\">\r\n\r\n  <div id=\"instructions\">\r\n\r\n    <div class=\"instruction-header\">\r\n<i class=\"fa fa-graduation-cap\"></i>\r\nLesson\r\n</div>\r\n\r\n    <div class=\"instruction-content\">\r\n\r\n      <p>Hiera is pretty handy for keeping all of your data in one place, when you add a\r\nlevel of hierarchy it becomes a lot more powerful.</p>\r\n\r\n      <p>Let&#8217;s imagine you have two webservers, one is in your &#8220;prod&#8221; app tier and one \r\nis in your &#8220;dev&#8221; app tier.  They are mostly the same, but they need to use \r\ndifferent DNS servers.</p>\r\n\r\n      <p><strong>Note: In Puppet, the word <code>environment</code> refers to a set of Puppet code that\r\napplies to a certain set of nodes.  We use the term <code>app tier</code> to refer to a\r\nphysical set of nodes. This distinction isn&#8217;t important for this course but it\r\nbecomes important when using recommended best practices for managing Puppet code.</strong></p>\r\n\r\n      <p>Without Hiera, your code might look like this:</p>\r\n      <pre>\r\ncase $::app_tier {\r\n  'prod': {\r\n    $dns_server = 'proddns.puppetlabs.vm'\r\n  }\r\n  'dev': {\r\n    $dns_server = 'devdns.puppetlabs.vm'\r\n  }\r\n}\r\nprofile::dns_server {\r\n  dns_server =&gt; $dns_server,\r\n}\r\n</pre>\r\n\r\n      <p>This is simple enough for two servers. What if you add developer workstations\r\nor another pre-production test app tier? What if there are more configuration\r\ndifferences between app tiers? The code can quickly get out of\r\ncontrol.</p>\r\n\r\n      <p>Let&#8217;s look at how the code would appear in using Hiera:</p>\r\n      <pre>\r\n$dns_server = hiera('$dns_server')\r\nprofile::dns_server {\r\n  dns_server =&gt; $dns_server,\r\n}\r\n</pre>\r\n\r\n      <p>So what happened to the details? Now they&#8217;re in two separate files, one for\r\neach app tier. They go in the same directory as <code>common.yaml</code></p>\r\n\r\n      <p>Here&#8217;s the prod tier datasource, we&#8217;ll call it <code>prod.yaml</code></p>\r\n      <pre>\r\n---\r\ndns_server: 'proddns.puppetlabs.vm'\r\n</pre>\r\n\r\n      <p>And here&#8217;s the dev tier datasource, we&#8217;ll call it <code>dev.yaml</code></p>\r\n      <pre>\r\n---\r\ndns_server: 'devdns.puppetlabs.vm'\r\n</pre>\r\n\r\n      <p>You&#8217;ll need to tell Hiera how to use these two files by editing your\r\nhiera.yaml file. You&#8217;ll have to add another level to the hierarchy,\r\nabove &#8220;common&#8221;. Since we want to use the value of the app tier fact\r\nand not just the word &#8220;app_tier&#8221;, we&#8217;ll need to add some special syntax.</p>\r\n\r\n      <p>Here&#8217;s what the <code>hiera.yaml</code> needs to look like:</p>\r\n      <pre>\r\n---\r\n:backends:\r\n  - yaml\r\n:hierarchy:\r\n  - \"nodes/%{::trusted.certname}\"\r\n  - \"%{::app_tier}\"\r\n  - common\r\n\r\n:yaml:\r\n# datadir is empty here, so hiera uses its defaults:\r\n# - /etc/puppetlabs/code/environments/%{environment}/hieradata on *nix\r\n# - %CommonAppData%\\PuppetLabs\\code\\environments\\%{environment}\\hieradata on Windows\r\n# When specifying a datadir, make sure the directory exists.\r\n  :datadir:\r\n</pre>\r\n\r\n      <p>Don&#8217;t worry if you&#8217;re confused by the syntax at this point, we&#8217;ll talk about\r\nit more later on. Note the other places in the file where the same syntax\r\nis used.</p>\r\n\r\n    </div>\r\n\r\n    <div class=\"instruction-header\">\r\n<i class=\"fa fa-desktop\"></i>\r\nPractice\r\n</div>\r\n\r\n    <div class=\"instruction-content\">\r\n\r\n      <p>Before we go further, why not try out what you&#8217;ve just learned?</p>\r\n\r\n      <p>First, run <code>puppet agent -t</code> to set up the node for this lesson.</p>\r\n\r\n      <p>We&#8217;ve set a custom fact of <code>app_tier=prod</code> so you can see what hiera will return\r\nfor the <code>prod</code> app tier by using this command:</p>\r\n\r\n      <pre>\r\npuppet apply -e \"notify{hiera('dns_server'):}\"\r\n</pre>\r\n\r\n      <p>To test out other app_tiers, try using the hiera command line tool. The <code>hiera</code>\r\ncomand line tool lets you specify the values for facts to test out results. This\r\ntool doesn&#8217;t have any facts by default, so we also need to specify environment.</p>\r\n\r\n      <p>To see what the value would be for dev use this command:</p>\r\n      <pre>\r\nhiera dns_server ::app_tier=dev environment=production\r\n</pre>\r\n\r\n    </div>\r\n\r\n    <div class=\"instruction-header\">\r\n<i class=\"fa fa-square-check-o\"></i>\r\nInstructions\r\n</div>\r\n\r\n    <div class=\"instruction-content\">\r\n\r\n      <p>Try adding another app tier called <code>qa</code>, or even another level in the\r\nhierarchy that&#8217;s based on the <code>hostname</code> fact instead of <code>app_tier</code>.</p>\r\n\r\n      <p>Remember, <code>hostname</code> is a built in fact to find your hostname run\r\n<code>facter hostname</code>.</p>\r\n\r\n    </div>\r\n\r\n  </div>\r\n\r\n  <div id=\"terminal\">\r\n  <iframe id=\"try\" src=\"https://try.puppet.com/sandbox/?course=get_hiera2\" name=\"terminal\"></iframe>\r\n</div>\r\n\r\n</div>","created":"2016-07-13 11:48:31","createdById":35,"deprecatedBy":"","duration":{"days":0,"minutesPerDay":0},"generateCertificate":"DEFAULT","generateProofOfCompletion":"DEFAULT","id":221,"modified":"2016-11-15 12:00:50","modifiedById":35,"name":"Getting Started with Hiera - Part 2","orderNumber":0,"price":{"amount":0.0,"currency":"USD"},"primaryCategoryId":7,"status":"ACTIVE_COMPONENT","urlName":"getting-started-with-hiera---part-2","visibility":"HIDDEN"},"componentId":221,"componentUUID":"ee902852-733a-3607-b031-f63e9564ca56","created":"2016-07-13 11:51:31","createdById":35,"id":176,"modified":"2016-07-13 11:51:31","modifiedById":35,"name":"Part 2","pathwayId":219,"position":2},{"_displayName_":"Course Requirement #177","_keyword_":"course_requirement","component":{"UUID":"20ca6f44-d492-3a8c-b946-7f965dd72349","_displayName_":"Getting Started with Hiera - Part 3","_keyword_":"content_component","content":"<link rel=\"stylesheet\" href=\"/static/selfpaced/selfpaced.css\" />\r\n\r\n<script defer=\"\" src=\"//code.jquery.com/jquery-1.11.2.js\"></script>\r\n\r\n<script defer=\"\" src=\"https://try.puppet.com/js/selfpaced.js\"></script>\r\n\r\n<div id=\"lesson\">\r\n\r\n  <div id=\"instructions\">\r\n\r\n    <div class=\"instruction-header\">\r\n<i class=\"fa fa-graduation-cap\"></i>\r\nLesson\r\n</div>\r\n\r\n    <div class=\"instruction-content\">\r\n\r\n      <p>In the last lesson, we assigned the value of a variable using the <code>hiera()</code>\r\nfunction and that variable was passed into a profile called <code>profile::dns</code>.\r\nThere is actually a better pattern for doing this, you can use the <code>hiera()</code>\r\nfunction inside the class definition as the default parameter.</p>\r\n\r\n      <p>So when you define your <code>profile::dns</code> class it would look something like this:</p>\r\n      <pre>\r\nclass profile::dns (\r\n  $dns_server = hiera('dns_server')\r\n) {\r\n...\r\n}  \r\n</pre>\r\n\r\n      <p>Since you wouldn&#8217;t need to specify the <code>dns_server</code> parameter when you declare\r\nthe class, you can now include the <code>profile::dns</code> class with this code:</p>\r\n      <pre>\r\ninclude profile::dns\r\n</pre>\r\n\r\n      <p>Assigning default parameters with hiera is a very common convention and was\r\nrecommended best practice in the past. You&#8217;ll will often see it in older forge modules\r\nor code written by developers who have used Puppet since before version 3.</p>\r\n\r\n      <p>There&#8217;s a problem with using hiera this way; As you write more code like this,\r\nit becomes very easy to lose track of which key/value pair applies to what class.\r\nThe standard convention is to use the name of class as part of the Hiera key\r\nlike this:\r\n<code>profile::dns::dns_server</code>.</p>\r\n\r\n      <p>This convention isn&#8217;t just to make things easy to remember. Since Puppet 3,\r\nthere has been a feature called &#8220;Automatic Parameter Lookup&#8221; which means you\r\ncan leave out the Hiera call from the class definition. When the Puppet master\r\ncompiles a catalog for your node it will check in Hiera before falling back to\r\nthe defaults.</p>\r\n\r\n      <p>In our example, let&#8217;s assume there&#8217;s a default value in <code>profile::params</code>:</p>\r\n\r\n      <pre>\r\nclass profile::dns (\r\n  $dns_server = $profile::params::dns_server\r\n) {\r\n...\r\n}\r\n</pre>\r\n\r\n      <p>Now if there is a value in Hiera for <code>profile::dns::dns_server</code> the master will\r\nuse that, otherwise it will fall back to what&#8217;s in <code>params.pp</code> of the &#8220;profile&#8221;\r\nmodule. You may be thinking that Hiera understands namespaces, so it&#8217;s somehow\r\nfiling the <code>dns_server</code> key under <code>profile::dns</code>, but that isn&#8217;t correct. Hiera\r\njust uses the entire string <code>profile::dns::dns_server</code> as a single key.</p>\r\n\r\n      <p>As always, you can override both defaults by specifying the\r\nparameter yourself, like this:</p>\r\n\r\n      <pre>\r\nclass {'profile::dns':\r\n  dns_server =&gt; 'globaldns.puppetlabs.vm',\r\n}\r\n</pre>\r\n\r\n      <p>The order of precedence is to check for class declaration parameters, then\r\nhiera, then class defaults.</p>\r\n\r\n    </div>\r\n\r\n    <div class=\"instruction-header\">\r\n<i class=\"fa fa-desktop\"></i>\r\nPractice\r\n</div>\r\n\r\n    <div class=\"instruction-content\">\r\n\r\n      <p>Automatic Parameter Lookup is one of the ways in which Hiera can seem &#8220;magical&#8221;\r\nto new users.  To help you get the hang of how it works, we&#8217;ve created a few\r\nexample classes that take parameters. Play around with it until it makes sense.</p>\r\n\r\n      <p>For this exercise, you&#8217;ll be running <code>puppet agent -t</code> against a Puppet master.\r\nFor convenience, we&#8217;ve let you edit your environment on the master by mounting \r\nit to the <code>/root/puppetcode</code> directory.</p>\r\n\r\n      <p>Look through the examples classes in <code>/root/puppetcode/modules/example/</code></p>\r\n\r\n      <p>You can just declare the example classes in the <code>default</code> node definition in\r\n<code>/root/puppetcode/manifests/site.pp</code> and run Puppet on your agent node.</p>\r\n\r\n      <p>Hiera lookups are done on the master, so you&#8217;ll need to change the files in \r\n<code>/root/puppetcode/hieradata</code> which is mapped to your code environment.</p>\r\n\r\n      <p>Because hiera.yaml exists on the master, you won&#8217;t be able to edit it directly.\r\nThe default configuration includes the <code>hieradata</code> directory in your\r\ncode environment.</p>\r\n\r\n      <p>Try setting values in <code>common.yaml</code> and the yaml file that matches your node\r\nin the <code>nodes</code> directory until you understand how automatic parameter lookup\r\nworks.</p>\r\n    </div>\r\n\r\n    <div class=\"instruction-header\">\r\n<i class=\"fa fa-pencil\"></i>\r\n</div>\r\n\r\n    <div class=\"instruction-content\">\r\n      <p>Before you begin run <code>puppet agent -t</code> once to set up your node for this lesson.</p>\r\n\r\n      <p>Remember, if you break something, just type <code>exit</code> and click <code>start session</code>\r\nwhen it appears and you&#8217;ll get a new node and code environment.</p>\r\n    </div>\r\n\r\n  </div>\r\n\r\n  <div id=\"terminal\">\r\n  <iframe id=\"try\" src=\"https://try.puppet.com/sandbox/?course=get_hiera3\" name=\"terminal\"></iframe>\r\n</div>\r\n\r\n</div>","created":"2016-07-13 11:49:04","createdById":35,"deprecatedBy":"","duration":{"days":0,"minutesPerDay":0},"generateCertificate":"DEFAULT","generateProofOfCompletion":"DEFAULT","id":222,"modified":"2016-11-15 12:01:13","modifiedById":35,"name":"Getting Started with Hiera - Part 3","orderNumber":0,"price":{"amount":0.0,"currency":"USD"},"primaryCategoryId":7,"status":"ACTIVE_COMPONENT","urlName":"getting-started-with-hiera---part-3","visibility":"HIDDEN"},"componentId":222,"componentUUID":"20ca6f44-d492-3a8c-b946-7f965dd72349","created":"2016-07-13 11:51:40","createdById":35,"id":177,"modified":"2016-07-13 11:51:40","modifiedById":35,"name":"Part 3","pathwayId":219,"position":3},{"_displayName_":"Course Requirement #178","_keyword_":"course_requirement","component":{"UUID":"43e8cb13-bf13-3e6e-b6d1-81bb567034a5","_displayName_":"Getting Started with Hiera - Part 4","_keyword_":"content_component","content":"<link rel=\"stylesheet\" href=\"/static/selfpaced/selfpaced.css\" />\r\n\r\n<script defer=\"\" src=\"//code.jquery.com/jquery-1.11.2.js\"></script>\r\n\r\n<script defer=\"\" src=\"https://try.puppet.com/js/selfpaced.js\"></script>\r\n\r\n<div id=\"lesson\">\r\n\r\n  <div id=\"instructions\">\r\n\r\n    <div class=\"instruction-header\">\r\n<i class=\"fa fa-graduation-cap\"></i>\r\nLesson\r\n</div>\r\n\r\n    <div class=\"instruction-content\">\r\n\r\n      <p>So far, most of our Hiera data files have been in a single directory.\r\nDepending on the complexity of your data, this might be fine,\r\nbut chances are you&#8217;ll want to split things up.</p>\r\n\r\n      <p>For example, what if you have some configuration that only applies to\r\nindividual nodes? It isn&#8217;t best practice, but sometimes you need to have a\r\ncouple of unique snowflakes in your infrastructure.</p>\r\n\r\n      <p>To support per-node configuration in Hiera, it&#8217;s best to use the <code>certname</code>\r\ntrusted fact. By default this is the fully qualified domain name of the node \r\nwhen the certificate was generated and it&#8217;s the unique name that the master \r\nknows the node by.  It&#8217;s more secure than using the hostname fact since a \r\ncompromised node could report a false hostname, but it can&#8217;t fake another \r\nnode&#8217;s certificate.</p>\r\n\r\n      <p>In order to keep all those YAML files from cluttering up our <code>hieradata</code> folder,\r\nwe&#8217;ll put them in a subfolder called <code>nodes</code>. By default, your <code>hiera.yaml</code> should\r\ncome with this level of the hierarchy already:</p>\r\n\r\n      <pre>\r\n---\r\n:backends: \"yaml\"\r\n:yaml:\r\n  :hierarchy:\r\n    - \"nodes/%{::trusted.certname}\"\r\n    - \"%{app_tier}\"\r\n    - \"common\"\r\n</pre>\r\n\r\n      <p>Let&#8217;s go back to the message of the day example to try this one out. Imagine\r\nyou&#8217;ve got two developers, Jane and Bob. They each have a development server\r\nfor testing out their code.</p>\r\n\r\n      <p>Jane wants to see some useful information when she logs in, so\r\n<code>nodes/jane.puppetlabs.vm.yaml</code> looks like this:</p>\r\n      <pre>\r\n---\r\nmessage: \"Welcome to ${hostname}. ${osfamily} - ${memorysize}\"\r\n</pre>\r\n\r\n      <p>Bob is more territorial, so <code>nodes/bob.puppetlabs.vm.yaml</code> looks like this:</p>\r\n      <pre>\r\n---\r\nmessage: \"This is Bob's development server. Don't touch anything, or else!\"\r\n</pre>\r\n\r\n      <p>This isn&#8217;t limited to a single directory, you can have multiple subdirectories.\r\nYou can even use have more complex levels of the hierarchy. For example, if you\r\nhave multiple datacenters each with a <code>dev</code> and <code>prod</code> app tier, you could use \r\na custom fact of <code>datacenter</code> to have something like this:</p>\r\n      <pre>\r\n---\r\n:backends: \"yaml\"\r\n:yaml:\r\n  :hierarchy:\r\n    - \"nodes/%{::trusted.certname}\"\r\n    - \"%{datacenter}/%{app_tier}\"\r\n    - \"common\"\r\n</pre>\r\n\r\n      <p>To test <code>trusted.certname</code> you&#8217;ll need to use <code>puppet agent</code> and you&#8217;ll obviously\r\nonly be able to test your actual trusted certname. Remember, you can&#8217;t use\r\n<code>trusted.certname</code> with <code>puppet apply</code> and you can&#8217;t change the <code>hiera.yaml</code> hierarchy\r\non the master from your node.</p>\r\n\r\n      <p>To give a more complex configuration a try, use something like <code>hostname</code>\r\ninstead of <code>trusted.certname</code> in your node&#8217;s hiera.yaml. Then you can use\r\nthe <code>hiera</code> command line tool, which lets use specify the values for various\r\nfacts by passing them as parameters.</p>\r\n\r\n      <p>For example, to find out the MOTD on the dev servers in the Portland \r\ndatacenter, you would use this command:</p>\r\n      <pre>\r\nhiera message app_tier=dev datacenter=portland environment=production\r\n</pre>\r\n\r\n      <p><code>environment</code> is specified here because the <code>hiera</code> command line tool\r\ndoesn&#8217;t supply any default facts or other variables.</p>\r\n\r\n    </div>\r\n\r\n    <div class=\"instruction-header\">\r\n<i class=\"fa fa-desktop\"></i>\r\nPractice\r\n</div>\r\n\r\n    <div class=\"instruction-content\">\r\n      <p>First, run <code>puppet agent -t</code> to set up your node for this lesson.</p>\r\n\r\n      <p>We&#8217;ve set up a complex hierarchy in the production code environment on your\r\nagent node, explore a bit, add some key/value pairs, and see if you can get a\r\nsense of how Hiera behaves. What happens if you use a hostname that doesn&#8217;t\r\nhave a corresponding YAML file? How about an app tier that doesn&#8217;t exist?\r\nWhat if you set up conflicting values?</p>\r\n\r\n      <p>If this is starting to seem overwhelming, don&#8217;t worry. Hierarchies of more than\r\na few levels are unusual in practice, so don&#8217;t add complexity if you don&#8217;t need\r\nit. Even this example is probably more complex than most users will ever\r\nneed.</p>\r\n\r\n      <p>Play around with <code>hiera</code> until you feel comfortable. Your node will expire after\r\n15 minutes, but you can start a new one and run <code>puppet agent -t</code> to get the\r\nstarter code again. Once you&#8217;re done, head back to <a href=\"https://learn.puppet.com\">learn.puppet.com</a>\r\nto try some other self-paced courses or download the Learning VM for more\r\nhands-on exercises.</p>\r\n    </div>\r\n\r\n  </div>\r\n\r\n  <div id=\"terminal\">\r\n  <iframe id=\"try\" src=\"https://try.puppet.com/sandbox/?course=get_hiera4\" name=\"terminal\"></iframe>\r\n</div>\r\n\r\n</div>","created":"2016-07-13 11:49:25","createdById":35,"deprecatedBy":"","duration":{"days":0,"minutesPerDay":0},"generateCertificate":"DEFAULT","generateProofOfCompletion":"DEFAULT","id":223,"modified":"2016-11-15 12:01:35","modifiedById":35,"name":"Getting Started with Hiera - Part 4","orderNumber":0,"price":{"amount":0.0,"currency":"USD"},"primaryCategoryId":7,"status":"ACTIVE_COMPONENT","urlName":"getting-started-with-hiera---part-4","visibility":"HIDDEN"},"componentId":223,"componentUUID":"43e8cb13-bf13-3e6e-b6d1-81bb567034a5","created":"2016-07-13 11:51:48","createdById":35,"id":178,"modified":"2016-07-13 11:51:48","modifiedById":35,"name":"Part 4","pathwayId":219,"position":4}],"courseInfo":"","created":"2016-07-13 11:45:56","createdById":35,"deprecatedBy":"","duration":{"days":0,"minutesPerDay":0},"generateCertificate":"DEFAULT","generateProofOfCompletion":"DEFAULT","id":219,"modified":"2016-11-16 11:30:11","modifiedById":35,"name":"Getting Started with Hiera","orderNumber":0,"price":{"amount":0.0,"currency":"USD"},"primaryCategoryId":7,"status":"ENABLED","type":{"_displayName_":"Course","_keyword_":"course_pathway_type","created":"2015-06-14 23:21:43","id":4,"modified":"2015-06-14 23:21:43","name":"Course","rootType":true,"supportedComponentTypes":["e_learning_component","course","content_component","exam_component"]},"typeId":4,"urlName":"getting-started-with-hiera","visibility":"PUBLIC"}